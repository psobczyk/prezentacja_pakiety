install.packages("FAMT")
install.packages("FAMT")
install.packages("FAMT")
install.packages("impute")
library(FAMT)
data(annotations)
dim(annotations)
summary(annotations)
data(expressions)
data(expression)
data(covariates)
chicken = as.FAMTdata(expression,covariates,annotations,idcovar=2)
summaryFAMT(chicken)
chicken.emfa = emfa(chicken,nbf=3,x=c(3,6),test=6)
chicken.emfa$commonvar
chicken.emfa$B
head(chicken.emfa$B)
head(chicken.emfa$Factors)
head(expression)
model = modelFAMT(chicken,x=c(3,6),test=6,nbf=3)
summaryFAMT(model)
hist(model$adjpval)
nbfactors(chicken,x=c(3,6),test=6, diagnostic.plot=TRUE)
summaryFAMT(model)
summary(covariates)
dim(covariates)
covariates
summary(expression)
n <- 1:30
covar2 <- df(ArrayName=apply(1:n, 1, function(x) paste("A", x, sep="")))
apply(1:n, 1, function(x) paste("A", x, sep=""))
covar2 <- df(ArrayName=apply(1:n, 2, function(x) paste("A", x, sep="")))
covar2 <- df(ArrayName=mapply(1:n, 1, function(x) paste("A", x, sep="")))
covar2 <- df(ArrayName=mapply(1:n, FUN=function(x) paste("A", x, sep="")))
covar2 <- df(ArrayName=lapply(list(1:n), FUN=function(x) paste("A", x, sep="")))
lapply(list(1:n), function(x) x^2)
lapply(as.list(1:n), function(x) x^2)
as.list(1:n)
list(c(1,2,3))
x = 1:5
as.list(x)
n <- 30
covar2 <- df(ArrayName=lapply(as.list(1:n), FUN=function(x) paste("A", x, sep="")))
covar2 <- df(ArrayName=lapply(as.list(n), FUN=function(x) paste("A", x, sep="")))
as.list(n)
n <- 1:30
as.list(n)
covar2 <- df(ArrayName=lapply(as.list(n), FUN=function(x) paste("A", x, sep="")))
lapply(as.list(n), function(x) x^2)
covar2 <- lapply(as.list(n), FUN=function(x) paste("A", x, sep=""))
covar2
covar2 <- unlist(lapply(as.list(n), FUN=function(x) paste("A", x, sep="")))
summary(covariates)
covar2 <- cbind(ArrayName=unlist(lapply(as.list(n), FUN=function(x) paste("A", x, sep=""))), Numer=n)
covar2
covar2 <- df(cbind(ArrayName=unlist(lapply(as.list(n), FUN=function(x) paste("A", x, sep=""))), Numer=n))
covar2 <- (cbind(ArrayName=unlist(lapply(as.list(n), FUN=function(x) paste("A", x, sep=""))), Numer=n))
covar2
head(expression)
summaryFAMT(model)
summary(covariates)
nbfactors(chicken,x=NULL, diagnostic.plot=TRUE)
nbfactors(chicken,x=NULL, test=NULL diagnostic.plot=TRUE)
nbfactors(chicken,x=2, test=2 diagnostic.plot=TRUE)
nbfactors(chicken,x=3, test=3, diagnostic.plot=TRUE)
library(slidify)
library(slidify)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install.packages("devtools")
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
library(slidify)
x <- c(1,2,4)
library(VarClust)
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
q()
n
curve(log(x), x=seq(0,10,0.1))
curve(log(x), from=0, to=10, n=100)
curve(log(x), from=0.001, to=10, n=100)
curve(log(|2-|x+1||), from=-10, to=10, n=1000)
curve(log(abs(2-abs(x+1))), from=-10, to=10, n=1000)
curve(log(4-abs(x+1)), from=-5, to=3, n=1000)
abline(v=-5, type=2)
abline(v=-5, type=1)
curve(log(4-abs(x+1)), from=-5, to=3, n=1000)
abline(v=-5, type=1)
abline(v=-5, lty=2)
curve(log(4-abs(x+1)), from=-5, to=3, n=1000)
abline(v=-5, lty=2)
abline(v=-5, lty=2, col="red")
abline(v=3, lty=2, col="red")
curve(log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000)
abline(v=-5, lty=2, col="red")
abline(v=3, lty=2, col="red")
abline(h=0)
curve(log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000, axes=F)
axis(1)
axis(2)
curve(log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000)
abline(v=-5, lty=2, col="red")
abline(v=3, lty=2, col="red")
abline(h=0)
curve(-log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000)
abline(v=-5, lty=2, col="red")
abline(v=3, lty=2, col="red")
abline(h=0)
main("ads")
curve(-log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000, main="ad")
curve(-log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000, main=expression(paste(-log[2](4-|x+1|))))
curve(-log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000, main=expression(paste(-log[2], "(4-|x+1|)")))
curve(-log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000, main=expression(paste("y=",-log[2], "(4-|x+1|)")))
curve(-log(x=4-abs(x+1), base=2), from=-5, to=3, n=1000, main=expression(paste("y=",-log[2], "(4-|x+1|)")), ylab="y")
curve(4-abs(x+1), from=-5, to=3, n=1000, main=expression(paste("(4-|x+1|)")), ylab="y")
curve(abs(x+1), from=-5, to=3, n=1000, main=expression(paste("|x+1|")), ylab="y")
curve(abs(log(x=4-abs(x+1))), base=2), from=-5, to=3, n=1000, main=expression(paste("y=|",log[2], "(4-|x+1|)|")), ylab="y")
curve(abs(log(4-abs(x+1)), base=2), from=-5, to=3, n=1000, main=expression(paste("y=|",log[2], "(4-|x+1|)|")), ylab="y")
curve(abs(log((4-abs(x+1)), base=2)), from=-5, to=3, n=1000, main=expression(paste("y=|",log[2], "(4-|x+1|)|")), ylab="y")
library(slidify)
slidify('Dropbox//doktorat/dydaktyka//wyklad_zmienne_losowe2/index.Rmd')
install.packages("rCharts)")
install.packages("rCharts")
slidify('Dropbox//doktorat/dydaktyka//wyklad_zmienne_losowe2/index.Rmd')
library(rCharts)
library(devtools)
install_github("rCharts")
install_github("dplyr")
install_github('rCharts', 'ramnathv')
library(rCharts)
slidify('Dropbox//doktorat/dydaktyka//wyklad_zmienne_losowe2/index.Rmd')
slidify('Dropbox//doktorat/dydaktyka//wyklad_zmienne_losowe2/index.Rmd')
slidify('Dropbox//doktorat/dydaktyka//wyklad_zmienne_losowe2/index.Rmd')
slidify('Dropbox//doktorat/dydaktyka//wyklad_zmienne_losowe2/index.Rmd')
slidify('Dropbox//doktorat/dydaktyka//wyklad_zmienne_losowe2/index.Rmd')
library(FactoMineR)
calcP <- function(X,ncp=2,scale=FALSE){
res=PCA(X,ncp=ncp,scale=scale,graph=FALSE)
if(ncp==1){
f=as.matrix(res$ind$coord)
u=sweep(as.matrix(res$var$coord),2,sqrt(res$eig[1:ncp,1]),FUN="/")
}else{
f=res$ind$coord[,1:ncp]
u=sweep(res$var$coord[,1:ncp],2,sqrt(res$eig[1:ncp,1]),FUN="/")
}
a=f%*%solve(t(f)%*%f)%*%t(f)
b=u%*%solve(t(u)%*%u)%*%t(u)
PuI = kronecker(t(b),diag(nrow(X)))
IPf = kronecker(diag(ncol(X)),a)
PuIPf = kronecker(t(b),a)
P = PuI + IPf -PuIPf
return (list(P=P,diagP=matrix(diag(P),ncol=ncol(X))))
}
sigma=0.5
SIGNAL <- replicate(numbPoints, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:dims[j]], ncol=dims[j]) %*% diag(svdSIGNAL$d[1:dims[j]], nrow=dims[j]) %*%
n=100
sigma=0.5
n=100
SIGNAL <- replicate(numbPoints, rnorm(n, 0, 1))
numbPoints=10
SIGNAL <- replicate(numbPoints, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:dims[j]], ncol=dims[j]) %*% diag(svdSIGNAL$d[1:dims[j]], nrow=dims[j]) %*%
t(matrix(svdSIGNAL$v[, 1:dims[j]], ncol=dims[j])) / sqrt(sum(svdSIGNAL$d[1:dims[j]]^2))
ncp=2
SIGNAL <- replicate(numbPoints, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:ncp], ncol=ncp) %*% diag(svdSIGNAL$d[1:ncp], nrow=ncp) %*%
t(matrix(svdSIGNAL$v[, 1:ncp], ncol=ncp)) / sqrt(sum(svdSIGNAL$d[1:ncp]^2))
SIGNAL <- scale(SIGNAL)
X = cbind(X, SIGNAL + sigma*replicate(numbPoints, rnorm(n, 0, 1)))
X = SIGNAL + sigma*replicate(numbPoints, rnorm(n, 0, 1))
aa=calcP(X,2)$P
sum(diag(aa))
p=10
(n*p - p - n*ncp - p*ncp + ncp^2)
dim(SIGNAL)
sigma=0.5
n=100
p=10
ncp=2
SIGNAL <- replicate(p, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:ncp], ncol=ncp) %*% diag(svdSIGNAL$d[1:ncp], nrow=ncp) %*%
t(matrix(svdSIGNAL$v[, 1:ncp], ncol=ncp)) / sqrt(sum(svdSIGNAL$d[1:ncp]^2))
SIGNAL <- scale(SIGNAL)
X = SIGNAL + sigma*replicate(p, rnorm(n, 0, 1))
aa=calcP(X,2)$P
sum(diag(aa))
sigma=0.5
n=100
p=10
ncp=2
SIGNAL <- replicate(p, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:ncp], ncol=ncp) %*% diag(svdSIGNAL$d[1:ncp], nrow=ncp) %*%
t(matrix(svdSIGNAL$v[, 1:ncp], ncol=ncp)) / sqrt(sum(svdSIGNAL$d[1:ncp]^2))
SIGNAL <- scale(SIGNAL)
X = SIGNAL + sigma*replicate(p, rnorm(n, 0, 1))
aa=calcP(X,2)$P
sum(diag(aa))
774+216
sigma=0.5
n=100
p=20
ncp=2
SIGNAL <- replicate(p, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:ncp], ncol=ncp) %*% diag(svdSIGNAL$d[1:ncp], nrow=ncp) %*%
t(matrix(svdSIGNAL$v[, 1:ncp], ncol=ncp)) / sqrt(sum(svdSIGNAL$d[1:ncp]^2))
SIGNAL <- scale(SIGNAL)
X = SIGNAL + sigma*replicate(p, rnorm(n, 0, 1))
aa=calcP(X,2)$P
sum(diag(aa))
(n*p - p - n*ncp - p*ncp + ncp^2)
(n*p - p - n*ncp - p*ncp + ncp^2)+sum(diag(aa))
sigma=0.5
n=100
p=20
ncp=2
SIGNAL <- replicate(p, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:ncp], ncol=ncp) %*% diag(svdSIGNAL$d[1:ncp], nrow=ncp) %*%
t(matrix(svdSIGNAL$v[, 1:ncp], ncol=ncp)) / sqrt(sum(svdSIGNAL$d[1:ncp]^2))
#SIGNAL <- scale(SIGNAL)
X = SIGNAL + sigma*replicate(p, rnorm(n, 0, 1))
aa=calcP(X,2)$P
sum(diag(aa))
sigma=0.5
n=100
p=20
ncp=2
SIGNAL <- replicate(p, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:ncp], ncol=ncp) %*% diag(svdSIGNAL$d[1:ncp], nrow=ncp) %*%
t(matrix(svdSIGNAL$v[, 1:ncp], ncol=ncp)) / sqrt(sum(svdSIGNAL$d[1:ncp]^2))
#SIGNAL <- scale(SIGNAL)
X = SIGNAL + sigma*replicate(p, rnorm(n, 0, 1))
aa=calcP(X,2)$P
sum(diag(aa))
res=PCA(X,ncp=ncp,scale=FALSE,graph=FALSE
)
res$eig
res$var
res$ind$coord
aa=calcP(X,2,T)$P
sum(diag(aa))
aa=calcP(X,2,F)$P
sum(diag(aa))
SIGNAL <- replicate(p, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:ncp], ncol=ncp) %*% diag(svdSIGNAL$d[1:ncp], nrow=ncp) %*%
t(matrix(svdSIGNAL$v[, 1:ncp], ncol=ncp)) / sqrt(sum(svdSIGNAL$d[1:ncp]^2))
X = SIGNAL + sigma*replicate(p, rnorm(n, 0, 1))
aa=calcP(X,2,F)$P
sum(diag(aa))
aa=calcP(X,2,T)$P
sum(diag(aa))
aa=calcP(X,2,scale=TRUE)$P
sum(diag(aa))
scale(X)
aa=calcP(X,2,scale=TRUE)$P
sum(diag(aa))
aa=calcP(X,2,scale=FALSE)$P
sum(diag(aa))
SIGNAL <- replicate(p, rnorm(n, 0, 1))
svdSIGNAL <- svd(SIGNAL)
SIGNAL <- matrix(svdSIGNAL$u[, 1:ncp], ncol=ncp) %*% diag(svdSIGNAL$d[1:ncp], nrow=ncp) %*%
t(matrix(svdSIGNAL$v[, 1:ncp], ncol=ncp)) / sqrt(sum(svdSIGNAL$d[1:ncp]^2))
X = SIGNAL + sigma*replicate(p, rnorm(n, 0, 1))
aa=calcP(X,2)$P
sum(diag(aa))
n*p - p - n*ncp - p*ncp + ncp^2
p + n*ncp + p*ncp - ncp^2
library(devtools)
x <- 1:1000
plot(function(x) (x^3-x^2)/(x^2-4))
plot(function(x) (x^3-x^2)/(x^2-4), 1:1000)
plot(x, (x^3-x^2)/(x^2-4))
plot(x, (x^3+x^2)/(x^2-4))
x <- 1:20
plot(x, (x^3+x^2)/(x^2-4))
abline(1,1)
plot(x, x*atan(1/x^2))
x <- 1:100
plot(x, x*atan(1/x^2))
abline(b=0)
abline(a=0,b=0)
x <- pi - 1/1:100
x
plot(x, sin(x)/x-pi)
plot(x, sin(x)/(x-pi))
x <- pi - 1/100:1000
plot(x, sin(x)/(x-pi))
x <- c( 10.0, 8.9, 9.1, 11.7. 7.9)
alfa <- 0.1
mu <- mean(x)
s <- sd(x)
x <- c( 10.0, 8.9, 9.1, 11.7, 7.9)
alfa <- 0.1
mu <- mean(x)
s <- sd(x)
mu
s
x-mean(x)
sum( (x-mean(x))^2)
sum( (x-mean(x))^2)/5
sum( (x-mean(x))^2)/6
sd(x)
mean(x)
sd
x-mu
(x-mu)^2
sum((x-mu)^2)
length(x)
sum((x-mu)^2)/4
x
x^2
mean(x^2)
mean(x^2)-mu^2
sqrt(sum((x-mu)^2)/4)
sd(x)
qnorm(0.025)
0.5^2
0.5^2/blad
blad <-0.01/z
p <- 0.2
alfa <- 0.05
z <- qnorm(1-alfa/2)
blad <-0.01/z
blad
(p*(1-p))^2/blad
p <- 0.5
(p*(1-p))^2/blad
p*(1-p)/blad
setwd("Dropbox/doktorat/moje_prace/prezentacje/seminarium_pakiety_14_11_28/")
library(slidify)
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
setwd("Dropbox/doktorat/moje_prace/prezentacje/seminarium_pakiety_14_11_28/")
browseURL("index.html")
